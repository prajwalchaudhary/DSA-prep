Problem statement :
You are given an integer 'n'. Return 'true' if 'n' is an Armstrong number, and 'false' otherwise.

An Armstrong number is a number (with 'k' digits) such that the sum of its digits raised to 'kth' power is equal to the number itself. For example, 371 is an Armstrong number because 3^3 + 7^3 + 1^3 = 371.

Sample Input 1 :
1

Sample Output 1 :
true


Explanation of Sample Input 1 :
1 is an Armstrong number as, 1^1 = 1.

Solution :

#include<math.h>
bool checkArmstrong(int n){
    int count=0, duplicate = n,rem;
    int check =n;
    while(n>0){
        n=n/10;
        count++;
    }
    int sum=0;
    while(duplicate>0){
        rem = duplicate%10;
        sum = sum + pow(rem, count);
        duplicate = duplicate/10;
    }
    if(check == sum){
        return true;
    }
    else{
        return false;
    }
}

