SOLVE THE SUDOKU :

Given an incomplete Sudoku configuration in terms of a 9x9  2-D interger square matrix, mat[][], the task is to solve the Sudoku. It is guaranteed that the input Sudoku will have exactly one solution.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Note: Zeros represent blanks to be filled with numbers 1-9, while non-zero cells are fixed and cannot be changed.

Examples:

Input: mat[][] = 

Output:

Explanation: Each row, column and 3 x 3 box of the output matrix contains unique numbers.

Solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
    public :
    
    bool isSafe(int row, int col, vector<vector<int>> &mat, int value){
        for(int i=0;i<9;i++){
            if(mat[row][i]==value){
                return false;
            }
            else if(mat[i][col]==value){
                return false;
            }
            else if(mat[3*(row/3) + i/3][3*(col/3) + i%3]==value){
                return false;
            }
        }
        return  true;
    }
    
    bool solve(vector<vector<int>> &mat){
        int n=mat[0].size();
        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                if(mat[row][col]==0){
                    for(int val=1;val<=9;val++){
                        if(isSafe(row, col, mat, val)){
                            mat[row][col]=val;
                            if(solve(mat)){
                                return true;
                            }
                            else{
                                mat[row][col]=0;
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
      
    void solveSudoku(vector<vector<int>> &mat) {
        solve(mat);
    }
};

//{ Driver Code Starts.

vector<int> inputLine() {
    string str;
    getline(cin, str);
    stringstream ss(str);
    int num;
    vector<int> res;
    while (ss >> num) {
        res.push_back(num);
    }
    return res;
}

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<vector<int>> grid;
        for (int i = 0; i < 9; i++) {
            vector<int> v = inputLine();
            grid.push_back(v);
        }

        Solution ob;

        ob.solveSudoku(grid);

        for (auto v : grid) {
            for (auto elem : v) {
                cout << elem << " ";
            }
            cout << endl;
        }

        cout << "~" << endl;
    }
    return 0;
}
// } Driver Code Ends


