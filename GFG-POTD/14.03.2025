Coin Change (Count Ways) :

Given an integer array coins[ ] representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
Note: Assume that you have an infinite supply of each type of coin. Therefore, you can use any coin as many times as you want.
Answers are guaranteed to fit into a 32-bit integer. 

Examples:

Input: coins[] = [1, 2, 3], sum = 4
Output: 4
Explanation: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].

Solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
public:
    int f(int ind, int sum, vector<int> &coins, vector<vector<int>> &dp){
        if(sum == 0) return 1;
        if(ind < 0) return 0;

        if(dp[ind][sum] != -1) return dp[ind][sum];

        int ways = 0;
        for(int coin_sum=0; coin_sum <= sum; coin_sum += coins[ind]){
            ways += f(ind-1, sum - coin_sum, coins, dp);
        }
        return dp[ind][sum] = ways;
    }
    int count(vector<int>& coins, int sum) {
        vector<vector<int>> dp(coins.size(), vector<int>(sum+9, -1));
        return f(coins.size()-1, sum, coins, dp);
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        int sum;
        cin >> sum;
        cin.ignore();
        Solution ob;
        cout << ob.count(arr, sum) << endl;
        cout << "~" << endl;
    }

    return 0;
}

// } Driver Code Ends
