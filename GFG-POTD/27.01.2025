LRU CACHE :

Design a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types:

PUT x y: sets the value of the key x with value y
GET x: gets the key of x if present else returns -1.
The LRUCache class has two methods get() and put() which are defined as follows.

get(key): returns the value of the key if it already exists in the cache otherwise returns -1.
put(key, value): if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its capacity it should remove the least recently used item before inserting the new item.
In the constructor of the class the capacity of the cache should be initialized.
Examples:

Input: cap = 2, Q = 2, Queries = [["PUT", 1, 2], ["GET", 1]]
Output: [2]
Explanation: Cache Size = 2
["PUT", 1, 2] will insert the key-value pair (1, 2) in the cache,
["GET", 1] will print the value corresponding to Key 1, ie 2.

Solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// design the class in the most optimal way

class LRUCache {
  private:
  public:
    // Constructor for initializing the cache capacity with the given value.
    int x = 0; // Recency counter (like a timestamp)
    int y=0;   // Pointer for least-recent recency value
    int mppSize;
    unordered_map<int, pair<int, int>> mpp; // Key -> {value, recency}
    unordered_map<int, int> mp;    // Recency -> Key
    LRUCache(int cap) {
        // code here
          mppSize = cap;
    }

    // Function to return value corresponding to the key.
    int get(int key) {
        // your code here
        if (mpp.find(key) != mpp.end()) {
            x++; // Increment recency counter
            mp.erase(mpp[key].second);
            mp[x]=key;
            mpp[key].second = x; // Update recency of the accessed key
            return mpp[key].first; // Return the value
        } else {
            return -1; // Key not found
        }
    }

    // Function for storing key-value pair.
    void put(int key, int value) {
        // your code here
           x++; // Increment recency counter

        // If the key is already present, update its value and recency
        if (mpp.find(key) != mpp.end()) {
            mp.erase(mpp[key].second);
            mp[x]=key;
            mpp[key] = {value, x};
            return;
        }

        // If cache is at full capacity, evict the least recently used item
        if (mpp.size() == mppSize) {
            while(!mp.count(y)) y++;
            mpp.erase(mp[y]);
            mp.erase(y);
        }
        // Insert the new key-value pair with the current recency
        mpp[key] = {value, x};
        mp[x]=key;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int capacity;
        cin >> capacity;
        LRUCache *cache = new LRUCache(capacity);

        int queries;
        cin >> queries;
        while (queries--) {
            string q;
            cin >> q;
            if (q == "PUT") {
                int key;
                cin >> key;
                int value;
                cin >> value;
                cache->put(key, value);
            } else {
                int key;
                cin >> key;
                cout << cache->get(key) << " ";
            }
        }
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends


