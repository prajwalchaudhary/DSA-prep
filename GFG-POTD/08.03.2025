Longest Palindrome in a String :

Given a string s, your task is to find the longest palindromic substring within s.

A substring is a contiguous sequence of characters within a string, defined as s[i...j] where 0 ≤ i ≤ j < len(s).

A palindrome is a string that reads the same forward and backward. More formally, s is a palindrome if reverse(s) == s.

Note: If there are multiple palindromic substrings with the same length, return the first occurrence of the longest palindromic substring from left to right.

Examples :

Input: s = “forgeeksskeegfor” 
Output: “geeksskeeg”
Explanation: There are several possible palindromic substrings like “kssk”, “ss”, “eeksskee” etc. But the substring “geeksskeeg” is the longest among all.

Solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    void solve(int &left,int &right,int n,string &s,int &start,int &maxlen){
        while(left>=0 && right<n && s[left]==s[right]){
            int len=right-left+1;
            if(len>maxlen){
                maxlen=len;
                start=left;
            }
            left--;
            right++;
        }
    }
    string longestPalindrome(string &s) {
        // code here
        int left=0,right=0,start=0,maxlen=0,n=s.size();
        for(int i=0;i<n;i++){
            left=i,right=i;
            solve(left,right,n,s,start,maxlen);
            left=i,right=i+1;
            solve(left,right,n,s,start,maxlen);
        }
        return s.substr(start,maxlen);
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        string S;
        cin >> S;

        Solution ob;
        cout << ob.longestPalindrome(S) << endl;

        cout << "~"
             << "\n";
    }
}

// } Driver Code Ends

