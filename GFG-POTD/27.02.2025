Get Min from Stack :

Given q queries, You task is to implement the following four functions for a stack:

push(x) – Insert an integer x onto the stack.
pop() – Remove the top element from the stack.
peek() - Return the top element from the stack. If the stack is empty, return -1.
getMin() – Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.
Each query can be one of the following:

1 x : Push x onto the stack.
2 : Pop the top element from the stack.
3: Return the top element from the stack. If the stack is empty, return -1.
4: Return the minimum element from the stack.
Examples:

Input: q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
Output: [3, 2, 1]
Explanation: 
push(2): Stack is [2]
push(3): Stack is [2, 3]
peek(): Top element is 3
pop(): Removes 3, stack is [2]
getMin(): Minimum element is 2
push(1): Stack is [2, 1]
getMin(): Minimum element is 1

Solution :

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
    public:
    vector<int> v1,v2;
    Solution() {
    }

// Add an element to the top of Stack
    void push(int x) {
        v1.push_back(x);
        if(v1.size() == 1)
            v2.push_back(x);
        else
        {
            if(v2.back() > x) 
                v2.push_back(x);
        }
    }
    
    // Remove the top element from the Stack
    void pop() {
        int x=-1;
        if(v1.size() > 0)
        {
            if(v1.back() == v2.back())
                v2.pop_back();
            v1.pop_back();
        }
    }
    
    // Returns top element of the Stack
    int peek() {
        if(v1.size() > 0)
            return v1.back();
        return -1;
        }
        
        // Finds minimum element of Stack
    int getMin() {
        if(v2.size() > 0)
            return v2.back();
        return -1;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int q;
        cin >> q;

        Solution ob;

        while (q--) {
            int qt;
            cin >> qt;

            if (qt == 1) {
                // push
                int att;
                cin >> att;
                ob.push(att);
            } else if (qt == 2) {
                // pop
                ob.pop();
            } else if (qt == 3) {
                // peek
                cout << ob.peek() << " ";
            } else if (qt == 4) {
                // getMin
                cout << ob.getMin() << " ";
            }
        }
        cout << endl;
        cout << "~" << endl;
    }

    return 0;
}

// } Driver Code Ends


